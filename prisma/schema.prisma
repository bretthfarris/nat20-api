// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================
// ðŸ“¦ Product Model
// ==================
model Product {
  id             String           @id @default(cuid())
  name           String
  slug           String           @unique
  description    String?
  productType    String // options defined at src/constants/enums.ts
  attributes     Json? // flexible per-type metadata
  enabled        Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  variants       ProductVariant[]
  Inventory      Inventory[]
  InventoryBatch InventoryBatch[]
}

// ==================
// ðŸ“¦ ProductVariant Model
// ==================
model ProductVariant {
  id         String   @id @default(cuid())
  productId  String
  name       String? // e.g. "Foil", "Borderless"
  attributes Json? // Flexible metadata: { condition: "NEAR_MINT", language: "EN", grade: "PSA 9" }
  isUsed     Boolean  @default(true)
  sku        String? // Optional internal SKU
  barcode    String? // Optional UPC/EAN
  enabled    Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  product        Product          @relation(fields: [productId], references: [id])
  inventory      Inventory[]
  InventoryBatch InventoryBatch[]
}

// ==================
// ðŸ“¦ Inventory Model
// ==================
model Inventory {
  id               String   @id @default(cuid())
  productId        String
  productVariantId String?
  quantity         Int // updated after batch insertions
  costBasis        Float // average cost per unit
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  product        Product          @relation(fields: [productId], references: [id])
  productVariant ProductVariant?  @relation(fields: [productVariantId], references: [id])
  batches        InventoryBatch[]

  @@unique([productId, productVariantId]) // âœ… Required for upsert to work
}

// ==================
// ðŸ“¦ InventoryBatch Model
// ==================
model InventoryBatch {
  id               String   @id @default(cuid())
  inventoryId      String
  productId        String
  productVariantId String?
  quantity         Int
  costPerUnit      Float
  sourceType       String
  source           Json
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  inventory      Inventory       @relation(fields: [inventoryId], references: [id])
  product        Product         @relation(fields: [productId], references: [id])
  productVariant ProductVariant? @relation(fields: [productVariantId], references: [id])
}
